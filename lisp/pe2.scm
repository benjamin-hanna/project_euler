#lang racket
(load "imports.scm")

; Even Fibonacci numbers
; Problem 2
; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
; By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

(define (fib)
    (define (fib-helper x y sum)
        (if (> y 4000000)
            sum
            (fib-helper y (+ x y) (+ sum (add-to-sum y)))))
    (define (add-to-sum n)
        (if (equal? (even? n) #t)
            n
            0))
    (define (even? n)
        (if (= (modulo n 2) 0)
        #t
        #f))
    (fib-helper 0 1 0))

; four times as fast?
(define (fib-evens)
    (define (fib-evens-helper sum e e0)
        (if (> e 4000000)
            sum
            (fib-evens-helper (+ e sum) (+ (* e 4) e0) e)))
    (fib-evens-helper 0 2 0))

